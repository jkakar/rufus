-module(rufus_expr_call_test).

-include_lib("eunit/include/eunit.hrl").

typecheck_and_annotate_with_function_calling_an_unknown_function_test() ->
    RufusText = "
    module example
    func Echo(text string) string { Ping() }
    ",
    {ok, Tokens} = rufus_tokenize:string(RufusText),
    {ok, Forms} = rufus_parse:parse(Tokens),
    Result = rufus_expr:typecheck_and_annotate(Forms),
    Data = #{args => [], spec => 'Ping'},
    ?assertEqual({error, unknown_func, Data}, Result).

typecheck_and_annotate_with_function_calling_a_function_with_a_missing_argument_test() ->
    RufusText = "
    module example
    func Echo(n string) string { \"Hello\" }
    func Broken() string { Echo() }
    ",
    {ok, Tokens} = rufus_tokenize:string(RufusText),
    {ok, Forms} = rufus_parse:parse(Tokens),
    Result = rufus_expr:typecheck_and_annotate(Forms),
    Data = #{args => [],
             funcs => [{func, #{params => {params, #{line => 3,
                                                     params => [{param, #{line => 3,
                                                                          spec => n,
                                                                          type => {type, #{line => 3,
                                                                                           source => rufus_text,
                                                                                           spec => string}}}}]}},
                                exprs => [{string_lit, #{line => 3,
                                                         spec => <<"Hello">>,
                                                         type => {type, #{line => 3,
                                                                          source => inferred,
                                                                          spec => string}}}}],
                                line => 3,
                                return_type => {type, #{line => 3,
                                                        source => rufus_text,
                                                        spec => string}},
                                spec => 'Echo'}}]},
    ?assertEqual({error, unknown_arity, Data}, Result).

typecheck_and_annotate_with_function_calling_a_function_with_a_mismatched_argument_type_test() ->
    RufusText = "
    module example
    func Echo(n string) string { \"Hello\" }
    func Broken() string { Echo(42) }
    ",
    {ok, Tokens} = rufus_tokenize:string(RufusText),
    {ok, Forms} = rufus_parse:parse(Tokens),
    Result = rufus_expr:typecheck_and_annotate(Forms),
    Data = #{args => [{int_lit, #{line => 4,
                                       spec => 42,
                                       type => {type, #{line => 4,
                                                        source => inferred,
                                                        spec => int}}}}],
             funcs => [{func, #{params => {params, #{line => 3,
                                                     params => [{param, #{line => 3,
                                                                          spec => n,
                                                                          type => {type, #{line => 3,
                                                                                           source => rufus_text,
                                                                                           spec => string}}}}]}},
                                exprs => [{string_lit, #{line => 3,
                                                         spec => <<"Hello">>,
                                                         type => {type, #{line => 3,
                                                                          source => inferred,
                                                                          spec => string}}}}],
                                line => 3,
                                return_type => {type, #{line => 3,
                                                        source => rufus_text,
                                                        spec => string}},
                                spec => 'Echo'}}]},
    ?assertEqual({error, unmatched_args, Data}, Result).

typecheck_and_annotate_with_function_calling_a_function_with_one_argument_test() ->
    RufusText = "
    module math
    func Echo(text string) string { text }
    func Greeting() string { Echo(\"hello\") }
    ",
    {ok, Tokens} = rufus_tokenize:string(RufusText),
    {ok, Forms} = rufus_parse:parse(Tokens),
    {ok, AnnotatedForms} = rufus_expr:typecheck_and_annotate(Forms),
    Expected = [{module, #{line => 2,
                           spec => math}},
                {func, #{exprs => [{identifier, #{line => 3,
                                                  spec => text,
                                                  type => {type, #{line => 3,
                                                                   source => rufus_text,
                                                                   spec => string}}}}],
                         line => 3,
                         params => {params, #{line => 3,
                                              params => [{param, #{line => 3,
                                                                   spec => text,
                                                                   type => {type, #{line => 3,
                                                                                    source => rufus_text,
                                                                                    spec => string}}}}]}},
                         return_type => {type, #{line => 3,
                                                 source => rufus_text,
                                                 spec => string}},
                         spec => 'Echo'}},
                {func, #{exprs => [{call, #{args => [{string_lit, #{line => 4,
                                                                    spec => <<"hello">>,
                                                                    type => {type, #{line => 4,
                                                                                     source => inferred,
                                                                                     spec => string}}}}],
                                            line => 4,
                                            spec => 'Echo',
                                            type => {type, #{line => 3,
                                                             source => rufus_text,
                                                             spec => string}}}}],
                         line => 4,
                         params => {params, #{line => 4,
                                              params => []}},
                         return_type => {type, #{line => 4,
                                                 source => rufus_text,
                                                 spec => string}},
                         spec => 'Greeting'}}],
    ?assertEqual(Expected, AnnotatedForms).

typecheck_and_annotate_with_function_calling_a_function_with_two_arguments_test() ->
    RufusText = "
    module math
    func Sum(m int, n int) int { m + n }
    func Random() int { Sum(1, 2) }
    ",
    {ok, Tokens} = rufus_tokenize:string(RufusText),
    {ok, Forms} = rufus_parse:parse(Tokens),
    {ok, AnnotatedForms} = rufus_expr:typecheck_and_annotate(Forms),
    Expected = [{module, #{line => 2,
                           spec => math}},
                {func, #{exprs => [{binary_op, #{left => {identifier, #{line => 3,
                                                                        spec => m,
                                                                        type => {type, #{line => 3,
                                                                                         source => rufus_text,
                                                                                         spec => int}}}},
                                                 line => 3,
                                                 op => '+',
                                                 right => {identifier, #{line => 3,
                                                                         spec => n,
                                                                         type => {type, #{line => 3,
                                                                                          source => rufus_text,
                                                                                          spec => int}}}},
                                                 type => {type, #{line => 3,
                                                                  source => rufus_text,
                                                                  spec => int}}}}],
                         line => 3,
                         params => {params, #{line => 3,
                                              params => [{param, #{line => 3,
                                                                   spec => m,
                                                                   type => {type, #{line => 3,
                                                                                    source => rufus_text,
                                                                                    spec => int}}}},
                                                         {param, #{line => 3,
                                                                   spec => n,
                                                                   type => {type, #{line => 3,
                                                                                    source => rufus_text,
                                                                                    spec => int}}}}]}},
                         return_type => {type, #{line => 3,
                                                 source => rufus_text,
                                                 spec => int}},
                         spec => 'Sum'}},
                {func, #{exprs => [{call, #{args => [{int_lit, #{line => 4,
                                                                 spec => 1,
                                                                 type => {type, #{line => 4,
                                                                                  source => inferred,
                                                                                  spec => int}}}},
                                                     {int_lit, #{line => 4,
                                                                 spec => 2,
                                                                 type => {type, #{line => 4,
                                                                                  source => inferred,
                                                                                  spec => int}}}}],
                                            line => 4,
                                            spec => 'Sum',
                                            type => {type, #{line => 3,
                                                             source => rufus_text,
                                                             spec => int}}}}],
                         line => 4,
                         params => {params, #{line => 4,
                                              params => []}},
                         return_type => {type, #{line => 4,
                                                 source => rufus_text,
                                                 spec => int}},
                         spec => 'Random'}}],
    ?assertEqual(Expected,  AnnotatedForms).

%% Function calls with binary_op arguments

eval_with_function_call_with_binary_op_argument_test() ->
    RufusText = "
    module example
    func double(n int) int { n * 2 }
    func SumAndDouble(m int, n int) int { double(m + n) }
    ",
    {ok, Tokens} = rufus_tokenize:string(RufusText),
    {ok, Forms} = rufus_parse:parse(Tokens),
    {ok, AnnotatedForms} = rufus_expr:typecheck_and_annotate(Forms),
    Expected = [{module, #{line => 2,
                           spec => example}},
                {func, #{exprs => [{binary_op, #{left => {identifier, #{line => 3,
                                                                        spec => n,
                                                                        type => {type, #{line => 3,
                                                                                         source => rufus_text,
                                                                                         spec => int}}}},
                                                 line => 3,
                                                 op => '*',
                                                 right => {int_lit, #{line => 3,
                                                                      spec => 2,
                                                                      type => {type, #{line => 3,
                                                                                       source => inferred,
                                                                                       spec => int}}}},
                                                 type => {type, #{line => 3,
                                                                  source => rufus_text,
                                                                  spec => int}}}}],
                         line => 3,
                         params => {params, #{line => 3,
                                              params => [{param, #{line => 3,
                                                                   spec => n,
                                                                   type => {type, #{line => 3,
                                                                                    source => rufus_text,
                                                                                    spec => int}}}}]}},
                         return_type => {type, #{line => 3,
                                                 source => rufus_text,
                                                 spec => int}},
                         spec => double}},
                {func, #{exprs => [{call, #{args => [{binary_op, #{left => {identifier, #{line => 4,
                                                                                          spec => m,
                                                                                          type => {type, #{line => 4,
                                                                                                           source => rufus_text,
                                                                                                           spec => int}}}},
                                                                   line => 4,
                                                                   op => '+',
                                                                   right => {identifier, #{line => 4,
                                                                                           spec => n,
                                                                                           type => {type, #{line => 4,
                                                                                                            source => rufus_text,
                                                                                                            spec => int}}}},
                                                                   type => {type, #{line => 4,
                                                                                    source => rufus_text,
                                                                                    spec => int}}}}],
                                            line => 4,
                                            spec => double,
                                            type => {type, #{line => 3,
                                                             source => rufus_text,
                                                             spec => int}}}}],
                         line => 4,
                         params => {params, #{line => 4,
                                              params => [{param, #{line => 4,
                                                                   spec => m,
                                                                   type => {type, #{line => 4,
                                                                                    source => rufus_text,
                                                                                    spec => int}}}},
                                                         {param, #{line => 4,
                                                                   spec => n,
                                                                   type => {type, #{line => 4,
                                                                                    source => rufus_text,
                                                                                    spec => int}}}}]}},
                         return_type => {type, #{line => 4,
                                                 source => rufus_text,
                                                 spec => int}},
                         spec => 'SumAndDouble'}}],
    ?assertEqual(Expected,  AnnotatedForms).

%% %% Function calls with match arguments

eval_with_function_call_with_match_argument_test() ->
    RufusText = "
    module example
    func Echo(n int) int { n }
    func Random() int { 42 = Echo(42) }
    ",
    {ok, Tokens} = rufus_tokenize:string(RufusText),
    {ok, Forms} = rufus_parse:parse(Tokens),
    {ok, AnnotatedForms} = rufus_expr:typecheck_and_annotate(Forms),
    Expected = [{module, #{line => 2,
                           spec => example}},
                {func, #{exprs => [{identifier, #{line => 3,
                                                  spec => n,
                                                  type =>
                                                      {type, #{line => 3,
                                                               source => rufus_text,
                                                               spec => int}}}}],
                         line => 3,
                         params => {params, #{line => 3,
                                              params => [{param, #{line => 3,
                                                                   spec => n,
                                                                   type => {type, #{line => 3,
                                                                                    source => rufus_text,
                                                                                    spec => int}}}}]}},
                         return_type => {type, #{line => 3,
                                                 source => rufus_text,
                                                 spec => int}},
                         spec => 'Echo'}},
                {func, #{exprs => [{match, #{left => {int_lit, #{line => 4,
                                                                 spec => 42,
                                                                 type => {type, #{line => 4,
                                                                                  source => inferred,
                                                                                  spec => int}}}},
                                             line => 4,
                                             right => {call, #{args => [{int_lit, #{line => 4,
                                                                                    spec => 42,
                                                                                    type => {type, #{line => 4,
                                                                                                     source => inferred,
                                                                                                     spec => int}}}}],
                                                               line => 4,
                                                               spec => 'Echo',
                                                               type => {type, #{line => 3,
                                                                                source => rufus_text,
                                                                                spec => int}}}},
                                             type => {type, #{line => 3,
                                                              source => rufus_text,
                                                              spec => int}}}}],
                         line => 4,
                         params => {params, #{line => 4,
                                              params => []}},
                         return_type => {type, #{line => 4,
                                                 source => rufus_text,
                                                 spec => int}},
                         spec => 'Random'}}],
    ?assertEqual(Expected,  AnnotatedForms).
